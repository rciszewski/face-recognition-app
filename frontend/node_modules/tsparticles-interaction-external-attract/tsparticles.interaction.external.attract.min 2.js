/*! tsParticles Attract External Interaction v2.0.6 by Matteo Bruni */
!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e(require("tsparticles-engine"));else if("function"==typeof define&&define.amd)define(["tsparticles-engine"],e);else{var a="object"==typeof exports?e(require("tsparticles-engine")):e(t.window);for(var r in a)("object"==typeof exports?exports:t)[r]=a[r]}}(this,(t=>(()=>{"use strict";var e={818:e=>{e.exports=t}},a={};function r(t){var c=a[t];if(void 0!==c)return c.exports;var i=a[t]={exports:{}};return e[t](i,i.exports,r),i.exports}r.d=(t,e)=>{for(var a in e)r.o(e,a)&&!r.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var c={};return(()=>{r.r(c),r.d(c,{loadExternalAttractInteraction:()=>a});var t=r(818);class e extends t.ExternalInteractorBase{constructor(t){super(t),t.attract||(t.attract={particles:[]}),this.handleClickMode=e=>{const a=this.container.actualOptions;if("attract"===e){t.attract||(t.attract={particles:[]}),t.attract.clicking=!0,t.attract.count=0;for(const e of t.attract.particles)e.velocity.setTo(e.initialVelocity);t.attract.particles=[],t.attract.finish=!1,setTimeout((()=>{t.destroyed||(t.attract||(t.attract={particles:[]}),t.attract.clicking=!1)}),1e3*a.interactivity.modes.attract.duration)}}}isEnabled(){const e=this.container,a=e.actualOptions,r=e.interactivity.mouse,c=a.interactivity.events;if(!(r.position&&c.onHover.enable||r.clickPosition&&c.onClick.enable))return!1;const i=c.onHover.mode,n=c.onClick.mode;return(0,t.isInArray)("attract",i)||(0,t.isInArray)("attract",n)}reset(){}async interact(){const e=this.container,a=e.actualOptions,r=e.interactivity.status===t.mouseMoveEvent,c=a.interactivity.events,i=c.onHover.enable,n=c.onHover.mode,o=c.onClick.enable,s=c.onClick.mode;r&&i&&(0,t.isInArray)("attract",n)?this.hoverAttract():o&&(0,t.isInArray)("attract",s)&&this.clickAttract()}hoverAttract(){const e=this.container,a=e.interactivity.mouse.position;if(!a)return;const r=e.retina.attractModeDistance;this.processAttract(a,r,new t.Circle(a.x,a.y,r))}processAttract(e,a,r){const c=this.container,i=c.actualOptions.interactivity.modes.attract,n=c.particles.quadTree.query(r);for(const r of n){const{dx:c,dy:n,distance:o}=(0,t.getDistances)(r.position,e),s=i.speed*i.factor,l=(0,t.clamp)((0,t.calcEasing)(1-o/a,i.easing)*s,0,i.maxSpeed),p=t.Vector.create(0===o?s:c/o*l,0===o?s:n/o*l);r.position.subFrom(p)}}clickAttract(){const e=this.container;if(e.attract||(e.attract={particles:[]}),e.attract.finish||(e.attract.count||(e.attract.count=0),e.attract.count++,e.attract.count===e.particles.count&&(e.attract.finish=!0)),e.attract.clicking){const a=e.interactivity.mouse.clickPosition;if(!a)return;const r=e.retina.attractModeDistance;this.processAttract(a,r,new t.Circle(a.x,a.y,r))}else!1===e.attract.clicking&&(e.attract.particles=[])}}async function a(t){await t.addInteractor("externalAttract",(t=>new e(t)))}})(),c})()));