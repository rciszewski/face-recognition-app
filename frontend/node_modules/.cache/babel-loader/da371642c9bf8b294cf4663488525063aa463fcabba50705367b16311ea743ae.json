{"ast":null,"code":"export class InteractionManager {\n  constructor(engine, container) {\n    this.container = container;\n    this._engine = engine;\n    this._interactors = this._engine.plugins.getInteractors(this.container, true);\n    this._externalInteractors = [];\n    this._particleInteractors = [];\n  }\n\n  async externalInteract(delta) {\n    for (const interactor of this._externalInteractors) {\n      if (interactor.isEnabled()) {\n        await interactor.interact(delta);\n      }\n    }\n  }\n\n  handleClickMode(mode) {\n    for (const interactor of this._externalInteractors) {\n      if (interactor.handleClickMode) {\n        interactor.handleClickMode(mode);\n      }\n    }\n  }\n\n  init() {\n    this._externalInteractors = [];\n    this._particleInteractors = [];\n\n    for (const interactor of this._interactors) {\n      switch (interactor.type) {\n        case 0:\n          this._externalInteractors.push(interactor);\n\n          break;\n\n        case 1:\n          this._particleInteractors.push(interactor);\n\n          break;\n      }\n\n      interactor.init();\n    }\n  }\n\n  async particlesInteract(particle, delta) {\n    for (const interactor of this._externalInteractors) {\n      interactor.clear(particle, delta);\n    }\n\n    for (const interactor of this._particleInteractors) {\n      if (interactor.isEnabled(particle)) {\n        await interactor.interact(particle, delta);\n      }\n    }\n  }\n\n  async reset(particle) {\n    for (const interactor of this._externalInteractors) {\n      if (interactor.isEnabled()) {\n        await interactor.reset(particle);\n      }\n    }\n\n    for (const interactor of this._particleInteractors) {\n      if (interactor.isEnabled(particle)) {\n        await interactor.reset(particle);\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["InteractionManager","constructor","engine","container","_engine","_interactors","plugins","getInteractors","_externalInteractors","_particleInteractors","externalInteract","delta","interactor","isEnabled","interact","handleClickMode","mode","init","type","push","particlesInteract","particle","clear","reset"],"sources":["/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/node_modules/tsparticles-engine/esm/Core/Utils/InteractionManager.js"],"sourcesContent":["export class InteractionManager {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this._interactors = this._engine.plugins.getInteractors(this.container, true);\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n    }\n    async externalInteract(delta) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                await interactor.interact(delta);\n            }\n        }\n    }\n    handleClickMode(mode) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.handleClickMode) {\n                interactor.handleClickMode(mode);\n            }\n        }\n    }\n    init() {\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n        for (const interactor of this._interactors) {\n            switch (interactor.type) {\n                case 0:\n                    this._externalInteractors.push(interactor);\n                    break;\n                case 1:\n                    this._particleInteractors.push(interactor);\n                    break;\n            }\n            interactor.init();\n        }\n    }\n    async particlesInteract(particle, delta) {\n        for (const interactor of this._externalInteractors) {\n            interactor.clear(particle, delta);\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                await interactor.interact(particle, delta);\n            }\n        }\n    }\n    async reset(particle) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                await interactor.reset(particle);\n            }\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                await interactor.reset(particle);\n            }\n        }\n    }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,kBAAN,CAAyB;EAC5BC,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoB;IAC3B,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,OAAL,GAAeF,MAAf;IACA,KAAKG,YAAL,GAAoB,KAAKD,OAAL,CAAaE,OAAb,CAAqBC,cAArB,CAAoC,KAAKJ,SAAzC,EAAoD,IAApD,CAApB;IACA,KAAKK,oBAAL,GAA4B,EAA5B;IACA,KAAKC,oBAAL,GAA4B,EAA5B;EACH;;EACqB,MAAhBC,gBAAgB,CAACC,KAAD,EAAQ;IAC1B,KAAK,MAAMC,UAAX,IAAyB,KAAKJ,oBAA9B,EAAoD;MAChD,IAAII,UAAU,CAACC,SAAX,EAAJ,EAA4B;QACxB,MAAMD,UAAU,CAACE,QAAX,CAAoBH,KAApB,CAAN;MACH;IACJ;EACJ;;EACDI,eAAe,CAACC,IAAD,EAAO;IAClB,KAAK,MAAMJ,UAAX,IAAyB,KAAKJ,oBAA9B,EAAoD;MAChD,IAAII,UAAU,CAACG,eAAf,EAAgC;QAC5BH,UAAU,CAACG,eAAX,CAA2BC,IAA3B;MACH;IACJ;EACJ;;EACDC,IAAI,GAAG;IACH,KAAKT,oBAAL,GAA4B,EAA5B;IACA,KAAKC,oBAAL,GAA4B,EAA5B;;IACA,KAAK,MAAMG,UAAX,IAAyB,KAAKP,YAA9B,EAA4C;MACxC,QAAQO,UAAU,CAACM,IAAnB;QACI,KAAK,CAAL;UACI,KAAKV,oBAAL,CAA0BW,IAA1B,CAA+BP,UAA/B;;UACA;;QACJ,KAAK,CAAL;UACI,KAAKH,oBAAL,CAA0BU,IAA1B,CAA+BP,UAA/B;;UACA;MANR;;MAQAA,UAAU,CAACK,IAAX;IACH;EACJ;;EACsB,MAAjBG,iBAAiB,CAACC,QAAD,EAAWV,KAAX,EAAkB;IACrC,KAAK,MAAMC,UAAX,IAAyB,KAAKJ,oBAA9B,EAAoD;MAChDI,UAAU,CAACU,KAAX,CAAiBD,QAAjB,EAA2BV,KAA3B;IACH;;IACD,KAAK,MAAMC,UAAX,IAAyB,KAAKH,oBAA9B,EAAoD;MAChD,IAAIG,UAAU,CAACC,SAAX,CAAqBQ,QAArB,CAAJ,EAAoC;QAChC,MAAMT,UAAU,CAACE,QAAX,CAAoBO,QAApB,EAA8BV,KAA9B,CAAN;MACH;IACJ;EACJ;;EACU,MAALY,KAAK,CAACF,QAAD,EAAW;IAClB,KAAK,MAAMT,UAAX,IAAyB,KAAKJ,oBAA9B,EAAoD;MAChD,IAAII,UAAU,CAACC,SAAX,EAAJ,EAA4B;QACxB,MAAMD,UAAU,CAACW,KAAX,CAAiBF,QAAjB,CAAN;MACH;IACJ;;IACD,KAAK,MAAMT,UAAX,IAAyB,KAAKH,oBAA9B,EAAoD;MAChD,IAAIG,UAAU,CAACC,SAAX,CAAqBQ,QAArB,CAAJ,EAAoC;QAChC,MAAMT,UAAU,CAACW,KAAX,CAAiBF,QAAjB,CAAN;MACH;IACJ;EACJ;;AA1D2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}