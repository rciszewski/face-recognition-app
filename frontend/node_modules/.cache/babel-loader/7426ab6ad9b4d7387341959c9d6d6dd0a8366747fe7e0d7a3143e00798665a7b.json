{"ast":null,"code":"var _jsxFileName = \"/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Particles from \"react-tsparticles\";\nimport Clarifai from 'clarifai';\nimport { loadFull } from \"tsparticles\";\nimport { tsParticles } from \"tsparticles-engine\";\nimport { particlesOptions } from './ParticleOptions';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from \"./components/SignIn/SignIn\";\nimport Register from \"./components/Register/Register\";\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '5f7089c95a9a46e2a37c402e60dd41fd'\n}); //Load particles background from tsParticles package\n\nconst particlesInit = async main => {\n  await loadFull(tsParticles);\n};\n\nconst initialState = {\n  imageUrl: '',\n  input: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      //storing data needed from Clarifai object into a variable\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box; //selecting the img tag in FaceRecognition component\n\n      const image = document.getElementById('inputimage'); //getting width & height of img\n\n      const width = Number(image.width);\n      const height = Number(image.height); //returning an object for facebox div dimensions according to Clarifai API\n\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict( // Clarifai.FACE_DETECT_MODEL\n      {\n        id: \"a403429f2ddf4b49b307e318f00e528b\",\n        version: \"34ce21a40cc24b6b96ffee54aabff139\"\n      }, this.state.input).then(response => {\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(entryCount => {\n            this.setState(Object.assign(this.state.user, {\n              entries: entryCount\n            }));\n            console.log(this.state);\n          });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      } else {\n        this.setState({\n          isSignedIn: false\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    const {\n      imageUrl,\n      box,\n      route,\n      isSignedIn\n    } = this.state;\n    const {\n      name,\n      entries\n    } = this.state.user;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        id: \"tsparticles\",\n        init: particlesInit,\n        options: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        onRouteChange: this.onRouteChange,\n        isSignedIn: isSignedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          userName: name,\n          userEntries: entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: box,\n          imageUrl: imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : route === 'signin' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Component","Particles","Clarifai","loadFull","tsParticles","particlesOptions","Navigation","SignIn","Register","Logo","Rank","ImageLinkForm","FaceRecognition","app","App","apiKey","particlesInit","main","initialState","imageUrl","input","box","route","isSignedIn","user","id","name","email","entries","joined","constructor","loadUser","data","setState","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","onInputChange","event","target","value","onButtonSubmit","state","models","predict","version","then","response","fetch","method","headers","body","JSON","stringify","json","entryCount","Object","assign","console","log","catch","err","onRouteChange","render"],"sources":["/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/src/App.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Particles from \"react-tsparticles\";\nimport Clarifai from 'clarifai';\nimport { loadFull } from \"tsparticles\";\nimport { tsParticles } from \"tsparticles-engine\";\nimport { particlesOptions } from './ParticleOptions';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from \"./components/SignIn/SignIn\";\nimport Register from \"./components/Register/Register\";\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: '5f7089c95a9a46e2a37c402e60dd41fd'\n});\n\n//Load particles background from tsParticles package\nconst particlesInit = async (main) => {\n  await loadFull(tsParticles);\n};\n\nconst initialState = {\n    imageUrl: '',\n    input: '',\n    box: {},\n    route: 'signin',\n    isSignedIn: false,\n    user: {\n      id: '',\n      name: '',\n      email: '',\n      entries: 0,\n      joined: ''\n    }\n  }\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = initialState;\n  }\n\nloadUser = (data) => {\n  this.setState({user: {\n    id: data.id,\n    name: data.name,\n    email: data.email,\n    entries: data.entries,\n    joined: data.joined\n  }})\n}\n\ncalculateFaceLocation = (data) => {\n  //storing data needed from Clarifai object into a variable\n  const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n  //selecting the img tag in FaceRecognition component\n  const image = document.getElementById('inputimage');\n  //getting width & height of img\n  const width = Number(image.width);\n  const height = Number(image.height);\n  //returning an object for facebox div dimensions according to Clarifai API\n  return {\n    leftCol: clarifaiFace.left_col * width,\n    topRow: clarifaiFace.top_row * height,\n    rightCol: width - (clarifaiFace.right_col * width),\n    bottomRow: height - (clarifaiFace.bottom_row * height)\n  }\n}\n\ndisplayFaceBox = (box) => {\n  this.setState({box: box});\n}\n\nonInputChange = (event) => {\n  this.setState({input: event.target.value})\n}\n\nonButtonSubmit = () => {\n  this.setState({imageUrl: this.state.input});\n\n  app.models.predict(\n    // Clarifai.FACE_DETECT_MODEL\n    {id: \"a403429f2ddf4b49b307e318f00e528b\",\n    version: \"34ce21a40cc24b6b96ffee54aabff139\"}, this.state.input)\n    .then(response => {\n      if(response){\n        fetch('http://localhost:3000/image', {\n          method: 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            id: this.state.user.id\n          })\n        })\n        .then(response => response.json())\n        .then(entryCount => {\n          this.setState(Object.assign(this.state.user, {entries: entryCount}))\n          console.log(this.state);\n        })\n      }\n      this.displayFaceBox(this.calculateFaceLocation(response))\n    })\n    .catch(err => console.log(err))\n}\n\nonRouteChange = (route) => {\n  if (route === 'home'){\n    this.setState({isSignedIn: true})\n  } else {\n    this.setState({isSignedIn: false})\n  }\n  this.setState({route: route});\n}\n\n  render (){\n    const {imageUrl, box, route, isSignedIn} = this.state;\n    const {name, entries} = this.state.user;\n    return (\n      <div>\n        <Particles \n          className=\"particles\" \n          id=\"tsparticles\" \n          init={particlesInit} \n          options={particlesOptions} \n        />\n        <Navigation onRouteChange={this.onRouteChange} isSignedIn={isSignedIn} />\n        { route === 'home' \n          ? <>\n          <Logo />\n          <Rank userName={name} userEntries={entries} />\n          <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} /> \n          <FaceRecognition box={box} imageUrl={imageUrl} /> \n          </>\n          : (\n            route === 'signin'\n          ? <SignIn loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n          : <Register loadUser={this.loadUser}          onRouteChange={this.onRouteChange} />\n          )\n       }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}