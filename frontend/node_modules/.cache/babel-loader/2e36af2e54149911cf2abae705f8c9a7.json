{"ast":null,"code":"import { Vector, isPointInside } from \"tsparticles-engine\";\nexport class NoneOutMode {\n  constructor(container) {\n    this.container = container;\n    this.modes = [\"none\"];\n  }\n\n  update(particle, direction, delta, outMode) {\n    if (!this.modes.includes(outMode)) {\n      return;\n    }\n\n    if (particle.options.move.distance.horizontal && (direction === \"left\" || direction === \"right\") || particle.options.move.distance.vertical && (direction === \"top\" || direction === \"bottom\")) {\n      return;\n    }\n\n    const gravityOptions = particle.options.move.gravity,\n          container = this.container;\n    const canvasSize = container.canvas.size;\n    const pRadius = particle.getRadius();\n\n    if (!gravityOptions.enable) {\n      if (particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius || particle.velocity.y < 0 && particle.position.y >= -pRadius || particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius || particle.velocity.x < 0 && particle.position.x >= -pRadius) {\n        return;\n      }\n\n      if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n\n      if (!gravityOptions.inverse && position.y > canvasSize.height + pRadius && direction === \"bottom\" || gravityOptions.inverse && position.y < -pRadius && direction === \"top\") {\n        container.particles.remove(particle);\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["Vector","isPointInside","NoneOutMode","constructor","container","modes","update","particle","direction","delta","outMode","includes","options","move","distance","horizontal","vertical","gravityOptions","gravity","canvasSize","canvas","size","pRadius","getRadius","enable","velocity","y","position","height","x","width","origin","particles","remove","inverse"],"sources":["/Users/ronciszewski/Desktop/SmartBrain/face-recognition-app/node_modules/tsparticles-updater-out-modes/esm/NoneOutMode.js"],"sourcesContent":["import { Vector, isPointInside } from \"tsparticles-engine\";\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"none\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === \"left\" || direction === \"right\")) ||\n            (particle.options.move.distance.vertical &&\n                (direction === \"top\" || direction === \"bottom\"))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        const canvasSize = container.canvas.size;\n        const pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < 0 && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < 0 && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === \"bottom\") ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === \"top\")) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,aAAjB,QAAsC,oBAAtC;AACA,OAAO,MAAMC,WAAN,CAAkB;EACrBC,WAAW,CAACC,SAAD,EAAY;IACnB,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,KAAL,GAAa,CAAC,MAAD,CAAb;EACH;;EACDC,MAAM,CAACC,QAAD,EAAWC,SAAX,EAAsBC,KAAtB,EAA6BC,OAA7B,EAAsC;IACxC,IAAI,CAAC,KAAKL,KAAL,CAAWM,QAAX,CAAoBD,OAApB,CAAL,EAAmC;MAC/B;IACH;;IACD,IAAKH,QAAQ,CAACK,OAAT,CAAiBC,IAAjB,CAAsBC,QAAtB,CAA+BC,UAA/B,KACAP,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,OADtC,CAAD,IAECD,QAAQ,CAACK,OAAT,CAAiBC,IAAjB,CAAsBC,QAAtB,CAA+BE,QAA/B,KACIR,SAAS,KAAK,KAAd,IAAuBA,SAAS,KAAK,QADzC,CAFL,EAG0D;MACtD;IACH;;IACD,MAAMS,cAAc,GAAGV,QAAQ,CAACK,OAAT,CAAiBC,IAAjB,CAAsBK,OAA7C;IAAA,MAAsDd,SAAS,GAAG,KAAKA,SAAvE;IACA,MAAMe,UAAU,GAAGf,SAAS,CAACgB,MAAV,CAAiBC,IAApC;IACA,MAAMC,OAAO,GAAGf,QAAQ,CAACgB,SAAT,EAAhB;;IACA,IAAI,CAACN,cAAc,CAACO,MAApB,EAA4B;MACxB,IAAKjB,QAAQ,CAACkB,QAAT,CAAkBC,CAAlB,GAAsB,CAAtB,IAA2BnB,QAAQ,CAACoB,QAAT,CAAkBD,CAAlB,IAAuBP,UAAU,CAACS,MAAX,GAAoBN,OAAvE,IACCf,QAAQ,CAACkB,QAAT,CAAkBC,CAAlB,GAAsB,CAAtB,IAA2BnB,QAAQ,CAACoB,QAAT,CAAkBD,CAAlB,IAAuB,CAACJ,OADpD,IAECf,QAAQ,CAACkB,QAAT,CAAkBI,CAAlB,GAAsB,CAAtB,IAA2BtB,QAAQ,CAACoB,QAAT,CAAkBE,CAAlB,IAAuBV,UAAU,CAACW,KAAX,GAAmBR,OAFtE,IAGCf,QAAQ,CAACkB,QAAT,CAAkBI,CAAlB,GAAsB,CAAtB,IAA2BtB,QAAQ,CAACoB,QAAT,CAAkBE,CAAlB,IAAuB,CAACP,OAHxD,EAGkE;QAC9D;MACH;;MACD,IAAI,CAACrB,aAAa,CAACM,QAAQ,CAACoB,QAAV,EAAoBvB,SAAS,CAACgB,MAAV,CAAiBC,IAArC,EAA2CrB,MAAM,CAAC+B,MAAlD,EAA0DT,OAA1D,EAAmEd,SAAnE,CAAlB,EAAiG;QAC7FJ,SAAS,CAAC4B,SAAV,CAAoBC,MAApB,CAA2B1B,QAA3B;MACH;IACJ,CAVD,MAWK;MACD,MAAMoB,QAAQ,GAAGpB,QAAQ,CAACoB,QAA1B;;MACA,IAAK,CAACV,cAAc,CAACiB,OAAhB,IACDP,QAAQ,CAACD,CAAT,GAAaP,UAAU,CAACS,MAAX,GAAoBN,OADhC,IAEDd,SAAS,KAAK,QAFd,IAGCS,cAAc,CAACiB,OAAf,IAA0BP,QAAQ,CAACD,CAAT,GAAa,CAACJ,OAAxC,IAAmDd,SAAS,KAAK,KAHtE,EAG8E;QAC1EJ,SAAS,CAAC4B,SAAV,CAAoBC,MAApB,CAA2B1B,QAA3B;MACH;IACJ;EACJ;;AAtCoB"},"metadata":{},"sourceType":"module"}