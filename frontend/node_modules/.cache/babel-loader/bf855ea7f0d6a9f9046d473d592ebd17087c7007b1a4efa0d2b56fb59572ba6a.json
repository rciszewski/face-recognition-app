{"ast":null,"code":"import { getRandom } from \"tsparticles-engine\";\nexport class CircleShape {\n  randomPosition(position, size, fill) {\n    const generateTheta = (x, y) => {\n      const u = getRandom() / 4.0,\n            theta = Math.atan(y / x * Math.tan(2 * Math.PI * u)),\n            v = getRandom();\n\n      if (v < 0.25) {\n        return theta;\n      } else if (v < 0.5) {\n        return Math.PI - theta;\n      } else if (v < 0.75) {\n        return Math.PI + theta;\n      } else {\n        return -theta;\n      }\n    },\n          radius = (x, y, theta) => x * y / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2),\n          [a, b] = [size.width / 2, size.height / 2],\n          randomTheta = generateTheta(a, b),\n          maxRadius = radius(a, b, randomTheta),\n          randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n\n    return {\n      x: position.x + randomRadius * Math.cos(randomTheta),\n      y: position.y + randomRadius * Math.sin(randomTheta)\n    };\n  }\n\n}","map":{"version":3,"names":["getRandom","CircleShape","randomPosition","position","size","fill","generateTheta","x","y","u","theta","Math","atan","tan","PI","v","radius","sqrt","cos","sin","a","b","width","height","randomTheta","maxRadius","randomRadius"],"sources":["/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/frontend/node_modules/tsparticles-plugin-emitters/esm/Shapes/Circle/CircleShape.js"],"sourcesContent":["import { getRandom } from \"tsparticles-engine\";\nexport class CircleShape {\n    randomPosition(position, size, fill) {\n        const generateTheta = (x, y) => {\n            const u = getRandom() / 4.0, theta = Math.atan((y / x) * Math.tan(2 * Math.PI * u)), v = getRandom();\n            if (v < 0.25) {\n                return theta;\n            }\n            else if (v < 0.5) {\n                return Math.PI - theta;\n            }\n            else if (v < 0.75) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2), [a, b] = [size.width / 2, size.height / 2], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            x: position.x + randomRadius * Math.cos(randomTheta),\n            y: position.y + randomRadius * Math.sin(randomTheta),\n        };\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAO,MAAMC,WAAN,CAAkB;EACrBC,cAAc,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAjB,EAAuB;IACjC,MAAMC,aAAa,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;MAC5B,MAAMC,CAAC,GAAGT,SAAS,KAAK,GAAxB;MAAA,MAA6BU,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAWJ,CAAC,GAAGD,CAAL,GAAUI,IAAI,CAACE,GAAL,CAAS,IAAIF,IAAI,CAACG,EAAT,GAAcL,CAAvB,CAApB,CAArC;MAAA,MAAqFM,CAAC,GAAGf,SAAS,EAAlG;;MACA,IAAIe,CAAC,GAAG,IAAR,EAAc;QACV,OAAOL,KAAP;MACH,CAFD,MAGK,IAAIK,CAAC,GAAG,GAAR,EAAa;QACd,OAAOJ,IAAI,CAACG,EAAL,GAAUJ,KAAjB;MACH,CAFI,MAGA,IAAIK,CAAC,GAAG,IAAR,EAAc;QACf,OAAOJ,IAAI,CAACG,EAAL,GAAUJ,KAAjB;MACH,CAFI,MAGA;QACD,OAAO,CAACA,KAAR;MACH;IACJ,CAdD;IAAA,MAcGM,MAAM,GAAG,CAACT,CAAD,EAAIC,CAAJ,EAAOE,KAAP,KAAkBH,CAAC,GAAGC,CAAL,GAAUG,IAAI,CAACM,IAAL,CAAU,CAACT,CAAC,GAAGG,IAAI,CAACO,GAAL,CAASR,KAAT,CAAL,KAAyB,CAAzB,GAA6B,CAACH,CAAC,GAAGI,IAAI,CAACQ,GAAL,CAAST,KAAT,CAAL,KAAyB,CAAhE,CAdvC;IAAA,MAc2G,CAACU,CAAD,EAAIC,CAAJ,IAAS,CAACjB,IAAI,CAACkB,KAAL,GAAa,CAAd,EAAiBlB,IAAI,CAACmB,MAAL,GAAc,CAA/B,CAdpH;IAAA,MAcuJC,WAAW,GAAGlB,aAAa,CAACc,CAAD,EAAIC,CAAJ,CAdlL;IAAA,MAc0LI,SAAS,GAAGT,MAAM,CAACI,CAAD,EAAIC,CAAJ,EAAOG,WAAP,CAd5M;IAAA,MAciOE,YAAY,GAAGrB,IAAI,GAAGoB,SAAS,GAAGd,IAAI,CAACM,IAAL,CAAUjB,SAAS,EAAnB,CAAf,GAAwCyB,SAd5R;;IAeA,OAAO;MACHlB,CAAC,EAAEJ,QAAQ,CAACI,CAAT,GAAamB,YAAY,GAAGf,IAAI,CAACO,GAAL,CAASM,WAAT,CAD5B;MAEHhB,CAAC,EAAEL,QAAQ,CAACK,CAAT,GAAakB,YAAY,GAAGf,IAAI,CAACQ,GAAL,CAASK,WAAT;IAF5B,CAAP;EAIH;;AArBoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}