{"ast":null,"code":"import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\n\nfunction setTransformValue(factor, newFactor, key) {\n  var _a;\n\n  const newValue = newFactor[key];\n\n  if (newValue !== undefined) {\n    factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n  }\n}\n\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generated = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n    this._mutationObserver = !isSsr() && typeof MutationObserver !== \"undefined\" ? new MutationObserver(records => {\n      for (const record of records) {\n        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n          this._repairStyle();\n        }\n      }\n    }) : undefined;\n  }\n\n  get _fullScreen() {\n    return this.container.actualOptions.fullScreen.enable;\n  }\n\n  clear() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n      this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n\n  destroy() {\n    var _a, _b;\n\n    (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n\n    if (this._generated) {\n      (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n    } else {\n      this._resetOriginalStyle();\n    }\n\n    this.draw(ctx => {\n      clear(ctx, this.size);\n    });\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n\n  draw(cb) {\n    if (!this._context) {\n      return;\n    }\n\n    return cb(this._context);\n  }\n\n  drawParticle(particle, delta) {\n    var _a;\n\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const radius = particle.getRadius();\n\n    if (radius <= 0) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor(),\n          psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n    let [fColor, sColor] = this._getPluginParticleColors(particle);\n\n    if (!fColor) {\n      fColor = pfColor;\n    }\n\n    if (!sColor) {\n      sColor = psColor;\n    }\n\n    if (!fColor && !sColor) {\n      return;\n    }\n\n    this.draw(ctx => {\n      var _a, _b, _c, _d, _e;\n\n      const options = this.container.actualOptions,\n            zIndexOptions = particle.options.zIndex,\n            zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n            opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n            strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity,\n            zOpacity = opacity * zOpacityFactor,\n            zStrokeOpacity = strokeOpacity * zOpacityFactor,\n            transform = {},\n            colorStyles = {\n        fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n      };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n\n      this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n\n      drawParticle({\n        container: this.container,\n        context: ctx,\n        particle,\n        delta,\n        colorStyles,\n        backgroundMask: options.backgroundMask.enable,\n        composite: options.backgroundMask.composite,\n        radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n        opacity: zOpacity,\n        shadow: particle.options.shadow,\n        transform\n      });\n\n      this._applyPostDrawUpdaters(particle);\n    });\n  }\n\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      drawParticlePlugin(ctx, plugin, particle, delta);\n    });\n  }\n\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      drawPlugin(ctx, plugin, delta);\n    });\n  }\n\n  init() {\n    var _a;\n\n    this.resize();\n\n    this._initStyle();\n\n    this._initCover();\n\n    this._initTrail();\n\n    this.initBackground();\n\n    if (this.element) {\n      (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, {\n        attributes: true\n      });\n    }\n\n    this.initUpdaters();\n    this.initPlugins();\n    this.paint();\n  }\n\n  initBackground() {\n    const options = this.container.actualOptions,\n          background = options.background,\n          element = this.element,\n          elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n    if (!elementStyle) {\n      return;\n    }\n\n    if (background.color) {\n      const color = rangeColorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n\n  initPlugins() {\n    this._resizePlugins = [];\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.resize) {\n        this._resizePlugins.push(plugin);\n      }\n\n      if (plugin.particleFillColor || plugin.particleStrokeColor) {\n        this._colorPlugins.push(plugin);\n      }\n    }\n  }\n\n  initUpdaters() {\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n\n    for (const updater of this.container.particles.updaters) {\n      if (updater.afterDraw) {\n        this._postDrawUpdaters.push(updater);\n      }\n\n      if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n        this._preDrawUpdaters.push(updater);\n      }\n    }\n  }\n\n  loadCanvas(canvas) {\n    var _a, _b;\n\n    if (this._generated) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this._generated = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generated;\n    this.element = canvas;\n    this.element.ariaHidden = \"true\";\n    this._originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this._context = this.element.getContext(\"2d\");\n    (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, {\n      attributes: true\n    });\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n\n        this._paintBase(this._coverColorStyle);\n      } else {\n        this._paintBase();\n      }\n    });\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          size = container.canvas.size,\n          newSize = {\n      width: this.element.offsetWidth * pxRatio,\n      height: this.element.offsetHeight * pxRatio\n    };\n\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return;\n    }\n\n    const oldSize = Object.assign({}, size);\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.resize();\n    const container = this.container,\n          needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n\n    this._applyResizePlugins();\n\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n\n  _applyPostDrawUpdaters(particle) {\n    var _a;\n\n    for (const updater of this._postDrawUpdaters) {\n      (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n\n  _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n    var _a;\n\n    for (const updater of this._preDrawUpdaters) {\n      if (updater.getColorStyles) {\n        const {\n          fill,\n          stroke\n        } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n\n        if (fill) {\n          colorStyles.fill = fill;\n        }\n\n        if (stroke) {\n          colorStyles.stroke = stroke;\n        }\n      }\n\n      if (updater.getTransformValues) {\n        const updaterTransform = updater.getTransformValues(particle);\n\n        for (const key in updaterTransform) {\n          setTransformValue(transform, updaterTransform, key);\n        }\n      }\n\n      (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n\n  _applyResizePlugins() {\n    for (const plugin of this._resizePlugins) {\n      if (plugin.resize) {\n        plugin.resize();\n      }\n    }\n  }\n\n  _getPluginParticleColors(particle) {\n    let fColor, sColor;\n\n    for (const plugin of this._colorPlugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n      }\n\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n      }\n\n      if (fColor && sColor) {\n        break;\n      }\n    }\n\n    return [fColor, sColor];\n  }\n\n  _initCover() {\n    const options = this.container.actualOptions,\n          cover = options.backgroundMask.cover,\n          color = cover.color,\n          coverRgb = rangeColorToRgb(color);\n\n    if (coverRgb) {\n      const coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n      this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n    }\n  }\n\n  _initStyle() {\n    const element = this.element,\n          options = this.container.actualOptions;\n\n    if (!element) {\n      return;\n    }\n\n    if (this._fullScreen) {\n      this._originalStyle = deepExtend({}, element.style);\n\n      this._setFullScreenStyle();\n    } else {\n      this._resetOriginalStyle();\n    }\n\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n\n      const value = options.style[key];\n\n      if (!value) {\n        continue;\n      }\n\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n\n  _initTrail() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          fillColor = rangeColorToRgb(trail.fillColor);\n\n    if (fillColor) {\n      const trail = options.particles.move.trail;\n      this._trailFillColor = Object.assign(Object.assign({}, fillColor), {\n        a: 1 / trail.length\n      });\n    }\n  }\n\n  _paintBase(baseColor) {\n    this.draw(ctx => {\n      paintBase(ctx, this.size, baseColor);\n    });\n  }\n\n  _repairStyle() {\n    var _a, _b;\n\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n\n    this._initStyle();\n\n    this.initBackground();\n    (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, {\n      attributes: true\n    });\n  }\n\n  _resetOriginalStyle() {\n    const element = this.element,\n          originalStyle = this._originalStyle;\n\n    if (!(element && originalStyle)) {\n      return;\n    }\n\n    element.style.position = originalStyle.position;\n    element.style.zIndex = originalStyle.zIndex;\n    element.style.top = originalStyle.top;\n    element.style.left = originalStyle.left;\n    element.style.width = originalStyle.width;\n    element.style.height = originalStyle.height;\n  }\n\n  _setFullScreenStyle() {\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    const priority = \"important\";\n    element.style.setProperty(\"position\", \"fixed\", priority);\n    element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n    element.style.setProperty(\"top\", \"0\", priority);\n    element.style.setProperty(\"left\", \"0\", priority);\n    element.style.setProperty(\"width\", \"100%\", priority);\n    element.style.setProperty(\"height\", \"100%\", priority);\n  }\n\n}","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","deepExtend","isSsr","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","generatedAttribute","setTransformValue","factor","newFactor","key","_a","newValue","undefined","Canvas","constructor","container","size","height","width","_context","_generated","_preDrawUpdaters","_postDrawUpdaters","_resizePlugins","_colorPlugins","_mutationObserver","MutationObserver","records","record","type","attributeName","_repairStyle","_fullScreen","actualOptions","fullScreen","enable","options","trail","particles","move","backgroundMask","paint","length","_trailFillColor","_paintBase","draw","ctx","destroy","_b","disconnect","element","remove","_resetOriginalStyle","cb","particle","delta","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","_getPluginParticleColors","_c","_d","_e","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","opacity","bubble","value","strokeOpacity","stroke","zOpacity","zStrokeOpacity","transform","colorStyles","fill","_applyPreDrawUpdaters","context","composite","sizeRate","shadow","_applyPostDrawUpdaters","plugin","init","resize","_initStyle","_initCover","_initTrail","initBackground","observe","attributes","initUpdaters","initPlugins","background","elementStyle","style","color","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","plugins","push","particleFillColor","particleStrokeColor","updater","updaters","afterDraw","getColorStyles","getTransformValues","beforeDraw","loadCanvas","canvas","dataset","ariaHidden","_originalStyle","offsetHeight","offsetWidth","getContext","retina","cover","_coverColorStyle","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","_applyResizePlugins","refresh","call","updaterTransform","coverRgb","coverColor","r","g","b","a","_setFullScreenStyle","setProperty","fillColor","baseColor","originalStyle","top","left","priority","toString"],"sources":["/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/frontend/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    var _a;\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n        this._mutationObserver =\n            !isSsr() && typeof MutationObserver !== \"undefined\"\n                ? new MutationObserver((records) => {\n                    for (const record of records) {\n                        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                            this._repairStyle();\n                        }\n                    }\n                })\n                : undefined;\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n            this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        var _a, _b;\n        (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        if (this._generated) {\n            (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        if (!this._context) {\n            return;\n        }\n        return cb(this._context);\n    }\n    drawParticle(particle, delta) {\n        var _a;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            var _a, _b, _c, _d, _e;\n            const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1, strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container: this.container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    init() {\n        var _a;\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        this._initTrail();\n        this.initBackground();\n        if (this.element) {\n            (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, { attributes: true });\n        }\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        var _a, _b;\n        if (this._generated) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, { attributes: true });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    _applyPostDrawUpdaters(particle) {\n        var _a;\n        for (const updater of this._postDrawUpdaters) {\n            (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n        var _a;\n        for (const updater of this._preDrawUpdaters) {\n            if (updater.getColorStyles) {\n                const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                if (fill) {\n                    colorStyles.fill = fill;\n                }\n                if (stroke) {\n                    colorStyles.stroke = stroke;\n                }\n            }\n            if (updater.getTransformValues) {\n                const updaterTransform = updater.getTransformValues(particle);\n                for (const key in updaterTransform) {\n                    setTransformValue(transform, updaterTransform, key);\n                }\n            }\n            (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyResizePlugins() {\n        for (const plugin of this._resizePlugins) {\n            if (plugin.resize) {\n                plugin.resize();\n            }\n        }\n    }\n    _getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const plugin of this._colorPlugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    _initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    _initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        if (this._fullScreen) {\n            this._originalStyle = deepExtend({}, element.style);\n            this._setFullScreenStyle();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    _initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, fillColor = rangeColorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this._trailFillColor = Object.assign(Object.assign({}, fillColor), { a: 1 / trail.length });\n        }\n    }\n    _paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    _repairStyle() {\n        var _a, _b;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this._initStyle();\n        this.initBackground();\n        (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, { attributes: true });\n    }\n    _resetOriginalStyle() {\n        const element = this.element, originalStyle = this._originalStyle;\n        if (!(element && originalStyle)) {\n            return;\n        }\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n    }\n    _setFullScreenStyle() {\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const priority = \"important\";\n        element.style.setProperty(\"position\", \"fixed\", priority);\n        element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n        element.style.setProperty(\"top\", \"0\", priority);\n        element.style.setProperty(\"left\", \"0\", priority);\n        element.style.setProperty(\"width\", \"100%\", priority);\n        element.style.setProperty(\"height\", \"100%\", priority);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}