{"ast":null,"code":"import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, colorToRgb, getDistance, getDistances, getRangeValue, getStyleFromRgb, isPointInside } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nexport class AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _a, _b, _c;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n\n    if (options instanceof Absorber) {\n      this.options = options;\n    } else {\n      this.options = new Absorber();\n      this.options.load(options);\n    }\n\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n    this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n    const limit = this.options.size.limit;\n    this.limit = {\n      radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: limit.mass\n    };\n    this.color = (_a = colorToRgb(this.options.color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n  }\n\n  attract(particle) {\n    const container = this.container,\n          options = this.options;\n\n    if (options.draggable) {\n      const mouse = container.interactivity.mouse;\n\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = getDistance(this.position, mouse.downPosition);\n\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n\n    const pos = particle.getPosition(),\n          {\n      dx,\n      dy,\n      distance\n    } = getDistances(this.position, pos),\n          v = Vector.create(dx, dy);\n    v.length = this.mass / Math.pow(distance, 2) * container.retina.reduceFactor;\n\n    if (distance < this.size + particle.getRadius()) {\n      const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n\n      if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this.updateParticlePosition(particle, v);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n\n        this.updateParticlePosition(particle, v);\n      }\n\n      if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n        this.size += sizeFactor;\n      }\n\n      if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n        this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n      }\n    } else {\n      this.updateParticlePosition(particle, v);\n    }\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this.calcPosition();\n  }\n\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n\n  calcPosition() {\n    const exactPosition = calcPositionOrRandomFromSizeRanged({\n      size: this.container.canvas.size,\n      position: this.options.position\n    });\n    return Vector.create(exactPosition.x, exactPosition.y);\n  }\n\n  updateParticlePosition(particle, v) {\n    var _a;\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    const container = this.container,\n          canvasSize = container.canvas.size;\n\n    if (particle.needsNewPosition) {\n      const newPosition = calcPositionOrRandomFromSize({\n        size: canvasSize\n      });\n      particle.position.setTo(newPosition);\n      particle.velocity.setTo(particle.initialVelocity);\n      particle.absorberOrbit = undefined;\n      particle.needsNewPosition = false;\n    }\n\n    if (this.options.orbits) {\n      if (particle.absorberOrbit === undefined) {\n        particle.absorberOrbit = Vector.create(0, 0);\n        particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n        particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n      }\n\n      if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n        const minSize = Math.min(canvasSize.width, canvasSize.height);\n        particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n      }\n\n      if (particle.absorberOrbitDirection === undefined) {\n        particle.absorberOrbitDirection = particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n      }\n\n      const orbitRadius = particle.absorberOrbit.length,\n            orbitAngle = particle.absorberOrbit.angle,\n            orbitDirection = particle.absorberOrbitDirection;\n      particle.velocity.setTo(Vector.origin);\n      const updateFunc = {\n        x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n        y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos\n      };\n      particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n      particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n      particle.absorberOrbit.length -= v.length;\n      particle.absorberOrbit.angle += ((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio / 100 * container.retina.reduceFactor;\n    } else {\n      const addV = Vector.origin;\n      addV.length = v.length;\n      addV.angle = v.angle;\n      particle.velocity.addTo(addV);\n    }\n  }\n\n}","map":{"version":3,"names":["Vector","calcPositionOrRandomFromSize","calcPositionOrRandomFromSizeRanged","colorToRgb","getDistance","getDistances","getRangeValue","getStyleFromRgb","isPointInside","Absorber","AbsorberInstance","constructor","absorbers","container","options","position","_a","_b","_c","initialPosition","create","x","y","undefined","load","dragging","name","opacity","size","value","retina","pixelRatio","mass","density","reduceFactor","limit","radius","color","b","g","r","copy","calcPosition","attract","particle","draggable","mouse","interactivity","clicking","downPosition","mouseDist","pos","getPosition","dx","dy","distance","v","length","Math","pow","getRadius","sizeFactor","absorberOrbit","destroy","needsNewPosition","updateParticlePosition","resize","canvas","origin","draw","context","translate","beginPath","arc","PI","closePath","fillStyle","fill","exactPosition","destroyed","canvasSize","newPosition","setTo","velocity","initialVelocity","orbits","angle","random","minSize","min","width","height","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","moveSpeed","addV","addTo"],"sources":["/Users/ronciszewski/Desktop/SmartBrain/face-recognition-app/node_modules/tsparticles-plugin-absorbers/esm/AbsorberInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, colorToRgb, getDistance, getDistances, getRangeValue, getStyleFromRgb, isPointInside, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b, _c;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = (_a = colorToRgb(this.options.color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this.updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this.updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this.updateParticlePosition(particle, v);\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        const exactPosition = calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n        return Vector.create(exactPosition.x, exactPosition.y);\n    }\n    updateParticlePosition(particle, v) {\n        var _a;\n        if (particle.destroyed) {\n            return;\n        }\n        const container = this.container, canvasSize = container.canvas.size;\n        if (particle.needsNewPosition) {\n            const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n            particle.position.setTo(newPosition);\n            particle.velocity.setTo(particle.initialVelocity);\n            particle.absorberOrbit = undefined;\n            particle.needsNewPosition = false;\n        }\n        if (this.options.orbits) {\n            if (particle.absorberOrbit === undefined) {\n                particle.absorberOrbit = Vector.create(0, 0);\n                particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n            }\n            if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                const minSize = Math.min(canvasSize.width, canvasSize.height);\n                particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n            }\n            if (particle.absorberOrbitDirection === undefined) {\n                particle.absorberOrbitDirection =\n                    particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n            }\n            const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n            particle.velocity.setTo(Vector.origin);\n            const updateFunc = {\n                x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n            };\n            particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n            particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n            particle.absorberOrbit.length -= v.length;\n            particle.absorberOrbit.angle +=\n                ((((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio) / 100) *\n                    container.retina.reduceFactor;\n        }\n        else {\n            const addV = Vector.origin;\n            addV.length = v.length;\n            addV.angle = v.angle;\n            particle.velocity.addTo(addV);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}