{"ast":null,"code":"import { getRangeValue, getValue, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nexport class DestroyUpdater {\n  constructor(engine, container) {\n    this.engine = engine;\n    this.container = container;\n  }\n\n  init(particle) {\n    const container = this.container,\n          particlesOptions = particle.options,\n          destroyOptions = particlesOptions.destroy;\n\n    if (!destroyOptions) {\n      return;\n    }\n\n    particle.splitCount = 0;\n    const destroyBounds = destroyOptions.bounds;\n\n    if (!particle.destroyBounds) {\n      particle.destroyBounds = {};\n    }\n\n    if (destroyBounds.bottom) {\n      particle.destroyBounds.bottom = getRangeValue(destroyBounds.bottom) * container.canvas.size.height / 100;\n    }\n\n    if (destroyBounds.left) {\n      particle.destroyBounds.left = getRangeValue(destroyBounds.left) * container.canvas.size.width / 100;\n    }\n\n    if (destroyBounds.right) {\n      particle.destroyBounds.right = getRangeValue(destroyBounds.right) * container.canvas.size.width / 100;\n    }\n\n    if (destroyBounds.top) {\n      particle.destroyBounds.top = getRangeValue(destroyBounds.top) * container.canvas.size.height / 100;\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed;\n  }\n\n  loadOptions(options) {\n    if (!options.destroy) {\n      options.destroy = new Destroy();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.destroy.load(source === null || source === void 0 ? void 0 : source.destroy);\n    }\n  }\n\n  particleDestroyed(particle, override) {\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = particle.options.destroy;\n\n    if (destroyOptions && destroyOptions.mode === \"split\") {\n      this.split(particle);\n    }\n  }\n\n  update(particle) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    const position = particle.getPosition(),\n          bounds = particle.destroyBounds;\n\n    if (!bounds) {\n      return;\n    }\n\n    if (bounds.bottom !== undefined && position.y >= bounds.bottom || bounds.left !== undefined && position.x <= bounds.left || bounds.right !== undefined && position.x >= bounds.right || bounds.top !== undefined && position.y <= bounds.top) {\n      particle.destroy();\n    }\n  }\n\n  addSplitParticle(parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n\n    if (!destroyOptions) {\n      return;\n    }\n\n    const splitOptions = destroyOptions.split,\n          options = loadParticlesOptions(this.engine, this.container, parent.options),\n          factor = getValue(splitOptions.factor);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n    options.move.load({\n      center: {\n        x: parent.position.x,\n        y: parent.position.y,\n        mode: \"precise\"\n      }\n    });\n\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n          position = {\n      x: parent.position.x + randomInRange(offset),\n      y: parent.position.y + randomInRange(offset)\n    };\n    return this.container.particles.addParticle(position, options, parent.group, particle => {\n      var _a;\n\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n\n      particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = ((_a = parent.splitCount) !== null && _a !== void 0 ? _a : 0) + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n\n  split(particle) {\n    const destroyOptions = particle.options.destroy;\n\n    if (!destroyOptions) {\n      return;\n    }\n\n    const splitOptions = destroyOptions.split;\n\n    if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n      return;\n    }\n\n    const rate = getValue(splitOptions.rate),\n          particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n\n    for (let i = 0; i < rate; i++) {\n      this.addSplitParticle(particle, particlesSplitOptions);\n    }\n  }\n\n}","map":{"version":3,"names":["getRangeValue","getValue","itemFromSingleOrMultiple","loadParticlesOptions","randomInRange","setRangeValue","Destroy","DestroyUpdater","constructor","engine","container","init","particle","particlesOptions","options","destroyOptions","destroy","splitCount","destroyBounds","bounds","bottom","canvas","size","height","left","width","right","top","isEnabled","destroyed","loadOptions","sources","source","load","particleDestroyed","override","mode","split","update","position","getPosition","undefined","y","x","addSplitParticle","parent","splitParticlesOptions","splitOptions","factor","color","value","hsl","getFillColor","move","center","min","max","offset","sizeOffset","particles","addParticle","group","_a","velocity","length","unbreakable","setTimeout","count","rate","particlesSplitOptions","i"],"sources":["/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/frontend/node_modules/tsparticles-updater-destroy/esm/DestroyUpdater.js"],"sourcesContent":["import { getRangeValue, getValue, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.engine = engine;\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBounds = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        if (destroyBounds.bottom) {\n            particle.destroyBounds.bottom = (getRangeValue(destroyBounds.bottom) * container.canvas.size.height) / 100;\n        }\n        if (destroyBounds.left) {\n            particle.destroyBounds.left = (getRangeValue(destroyBounds.left) * container.canvas.size.width) / 100;\n        }\n        if (destroyBounds.right) {\n            particle.destroyBounds.right = (getRangeValue(destroyBounds.right) * container.canvas.size.width) / 100;\n        }\n        if (destroyBounds.top) {\n            particle.destroyBounds.top = (getRangeValue(destroyBounds.top) * container.canvas.size.height) / 100;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source === null || source === void 0 ? void 0 : source.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === \"split\") {\n            this.split(particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n    addSplitParticle(parent, splitParticlesOptions) {\n        const destroyOptions = parent.options.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        const splitOptions = destroyOptions.split, options = loadParticlesOptions(this.engine, this.container, parent.options), factor = getValue(splitOptions.factor);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        options.move.load({\n            center: {\n                x: parent.position.x,\n                y: parent.position.y,\n                mode: \"precise\",\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitParticlesOptions);\n        const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n            x: parent.position.x + randomInRange(offset),\n            y: parent.position.y + randomInRange(offset),\n        };\n        return this.container.particles.addParticle(position, options, parent.group, (particle) => {\n            var _a;\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = ((_a = parent.splitCount) !== null && _a !== void 0 ? _a : 0) + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    split(particle) {\n        const destroyOptions = particle.options.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        const splitOptions = destroyOptions.split;\n        if (splitOptions.count >= 0 &&\n            (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n            return;\n        }\n        const rate = getValue(splitOptions.rate), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n        for (let i = 0; i < rate; i++) {\n            this.addSplitParticle(particle, particlesSplitOptions);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}