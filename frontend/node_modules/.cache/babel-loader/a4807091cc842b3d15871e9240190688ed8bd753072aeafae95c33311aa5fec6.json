{"ast":null,"code":"import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\n\nfunction getLinkKey(ids) {\n  ids.sort((a, b) => a - b);\n  return ids.join(\"_\");\n}\n\nfunction setLinkFrequency(particles, dictionary) {\n  const key = getLinkKey(particles.map(t => t.id));\n  let res = dictionary.get(key);\n\n  if (res === undefined) {\n    res = getRandom();\n    dictionary.set(key, res);\n  }\n\n  return res;\n}\n\nexport class LinkInstance {\n  constructor(container) {\n    this.container = container;\n    this._freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n  }\n\n  drawParticle(context, particle) {\n    var _a;\n\n    const container = this.container,\n          pOptions = particle.options;\n\n    if (!particle.links || particle.links.length <= 0) {\n      return;\n    }\n\n    const p1Links = particle.links.filter(l => pOptions.links && this.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency);\n\n    for (const link of p1Links) {\n      this.drawTriangles(container, pOptions, particle, link, p1Links);\n\n      if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n        this.drawLinkLine(particle, link);\n      }\n    }\n  }\n\n  async init() {\n    this._freqs.links = new Map();\n    this._freqs.triangles = new Map();\n  }\n\n  particleCreated(particle) {\n    particle.links = [];\n\n    if (!particle.options.links) {\n      return;\n    }\n\n    const ratio = this.container.retina.pixelRatio;\n    particle.retina.linksDistance = particle.options.links.distance * ratio;\n    particle.retina.linksWidth = particle.options.links.width * ratio;\n  }\n\n  particleDestroyed(particle) {\n    particle.links = [];\n  }\n\n  drawLinkLine(p1, link) {\n    const container = this.container,\n          options = container.actualOptions,\n          p2 = link.destination,\n          pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n    let opacity = link.opacity;\n    container.canvas.draw(ctx => {\n      var _a, _b, _c;\n\n      if (!p1.options.links) {\n        return;\n      }\n\n      let colorLine;\n      const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n\n      if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n        const twinkleFreq = twinkle.frequency,\n              twinkleRgb = rangeColorToRgb(twinkle.color),\n              twinkling = getRandom() < twinkleFreq;\n\n        if (twinkling && twinkleRgb) {\n          colorLine = twinkleRgb;\n          opacity = getRangeValue(twinkle.opacity);\n        }\n      }\n\n      if (!colorLine) {\n        const linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorLine = getLinkColor(p1, p2, linkColor);\n      }\n\n      if (!colorLine) {\n        return;\n      }\n\n      const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0,\n            maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n      drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n    });\n  }\n\n  drawLinkTriangle(p1, link1, link2) {\n    var _a;\n\n    if (!p1.options.links) {\n      return;\n    }\n\n    const container = this.container,\n          options = container.actualOptions,\n          p2 = link1.destination,\n          p3 = link2.destination,\n          triangleOptions = p1.options.links.triangles,\n          opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n\n    if (opacityTriangle <= 0) {\n      return;\n    }\n\n    container.canvas.draw(ctx => {\n      var _a;\n\n      const pos1 = p1.getPosition(),\n            pos2 = p2.getPosition(),\n            pos3 = p3.getPosition(),\n            linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n\n      if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {\n        return;\n      }\n\n      let colorTriangle = rangeColorToRgb(triangleOptions.color);\n\n      if (!colorTriangle) {\n        const linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorTriangle = getLinkColor(p1, p2, linkColor);\n      }\n\n      if (!colorTriangle) {\n        return;\n      }\n\n      drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n    });\n  }\n\n  drawTriangles(container, options, p1, link, p1Links) {\n    var _a, _b, _c;\n\n    const p2 = link.destination;\n\n    if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n      return;\n    }\n\n    const vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter(t => {\n      const linkFreq = this.getLinkFrequency(p2, t.destination);\n      return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(l => l.destination === t.destination) >= 0;\n    });\n\n    if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n      return;\n    }\n\n    for (const vertex of vertices) {\n      const p3 = vertex.destination,\n            triangleFreq = this.getTriangleFrequency(p1, p2, p3);\n\n      if (triangleFreq > options.links.triangles.frequency) {\n        continue;\n      }\n\n      this.drawLinkTriangle(p1, link, vertex);\n    }\n  }\n\n  getLinkFrequency(p1, p2) {\n    return setLinkFrequency([p1, p2], this._freqs.links);\n  }\n\n  getTriangleFrequency(p1, p2, p3) {\n    return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n  }\n\n}","map":{"version":3,"names":["drawLinkLine","drawLinkTriangle","getDistance","getLinkColor","getRandom","getRangeValue","rangeColorToRgb","getLinkKey","ids","sort","a","b","join","setLinkFrequency","particles","dictionary","key","map","t","id","res","get","undefined","set","LinkInstance","constructor","container","_freqs","links","Map","triangles","drawParticle","context","particle","_a","pOptions","options","length","p1Links","filter","l","getLinkFrequency","destination","frequency","link","drawTriangles","opacity","retina","linksWidth","init","particleCreated","ratio","pixelRatio","linksDistance","distance","width","particleDestroyed","p1","actualOptions","p2","pos1","getPosition","pos2","canvas","draw","ctx","_b","_c","colorLine","twinkle","lines","enable","twinkleFreq","twinkleRgb","color","twinkling","linksOptions","linkColor","linksColors","linksColor","maxDistance","size","warp","backgroundMask","composite","shadow","link1","link2","p3","triangleOptions","opacityTriangle","pos3","colorTriangle","vertices","linkFreq","findIndex","vertex","triangleFreq","getTriangleFrequency"],"sources":["/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/frontend/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"sourcesContent":["import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nfunction getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nfunction setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        var _a;\n        const container = this.container, pOptions = particle.options;\n        if (!particle.links || particle.links.length <= 0) {\n            return;\n        }\n        const p1Links = particle.links.filter((l) => pOptions.links && this.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency);\n        for (const link of p1Links) {\n            this.drawTriangles(container, pOptions, particle, link, p1Links);\n            if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n                this.drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio;\n        particle.retina.linksDistance = particle.options.links.distance * ratio;\n        particle.retina.linksWidth = particle.options.links.width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n    drawLinkLine(p1, link) {\n        const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        let opacity = link.opacity;\n        container.canvas.draw((ctx) => {\n            var _a, _b, _c;\n            if (!p1.options.links) {\n                return;\n            }\n            let colorLine;\n            const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n            if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n                const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                    colorLine = twinkleRgb;\n                    opacity = getRangeValue(twinkle.opacity);\n                }\n            }\n            if (!colorLine) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorLine = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorLine) {\n                return;\n            }\n            const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0, maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n            drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n        });\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a;\n        if (!p1.options.links) {\n            return;\n        }\n        const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        if (opacityTriangle <= 0) {\n            return;\n        }\n        container.canvas.draw((ctx) => {\n            var _a;\n            const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n            if (getDistance(pos1, pos2) > linksDistance ||\n                getDistance(pos3, pos2) > linksDistance ||\n                getDistance(pos3, pos1) > linksDistance) {\n                return;\n            }\n            let colorTriangle = rangeColorToRgb(triangleOptions.color);\n            if (!colorTriangle) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorTriangle = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorTriangle) {\n                return;\n            }\n            drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n        });\n    }\n    drawTriangles(container, options, p1, link, p1Links) {\n        var _a, _b, _c;\n        const p2 = link.destination;\n        if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n            return;\n        }\n        const vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter((t) => {\n            const linkFreq = this.getLinkFrequency(p2, t.destination);\n            return (p2.options.links &&\n                linkFreq <= p2.options.links.frequency &&\n                p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n        });\n        if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n            return;\n        }\n        for (const vertex of vertices) {\n            const p3 = vertex.destination, triangleFreq = this.getTriangleFrequency(p1, p2, p3);\n            if (triangleFreq > options.links.triangles.frequency) {\n                continue;\n            }\n            this.drawLinkTriangle(p1, link, vertex);\n        }\n    }\n    getLinkFrequency(p1, p2) {\n        return setLinkFrequency([p1, p2], this._freqs.links);\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}