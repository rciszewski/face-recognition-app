{"ast":null,"code":"import { drawLine, drawTriangle, getDistance, getDistances, getStyleFromRgb, rangeColorToRgb } from \"tsparticles-engine\";\nexport function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n  let drawn = false;\n\n  if (getDistance(begin, end) <= maxDistance) {\n    drawLine(context, begin, end);\n    drawn = true;\n  } else if (warp) {\n    let pi1;\n    let pi2;\n    const endNE = {\n      x: end.x - canvasSize.width,\n      y: end.y\n    };\n    const d1 = getDistances(begin, endNE);\n\n    if (d1.distance <= maxDistance) {\n      const yi = begin.y - d1.dy / d1.dx * begin.x;\n      pi1 = {\n        x: 0,\n        y: yi\n      };\n      pi2 = {\n        x: canvasSize.width,\n        y: yi\n      };\n    } else {\n      const endSW = {\n        x: end.x,\n        y: end.y - canvasSize.height\n      };\n      const d2 = getDistances(begin, endSW);\n\n      if (d2.distance <= maxDistance) {\n        const yi = begin.y - d2.dy / d2.dx * begin.x;\n        const xi = -yi / (d2.dy / d2.dx);\n        pi1 = {\n          x: xi,\n          y: 0\n        };\n        pi2 = {\n          x: xi,\n          y: canvasSize.height\n        };\n      } else {\n        const endSE = {\n          x: end.x - canvasSize.width,\n          y: end.y - canvasSize.height\n        };\n        const d3 = getDistances(begin, endSE);\n\n        if (d3.distance <= maxDistance) {\n          const yi = begin.y - d3.dy / d3.dx * begin.x;\n          const xi = -yi / (d3.dy / d3.dx);\n          pi1 = {\n            x: xi,\n            y: yi\n          };\n          pi2 = {\n            x: pi1.x + canvasSize.width,\n            y: pi1.y + canvasSize.height\n          };\n        }\n      }\n    }\n\n    if (pi1 && pi2) {\n      drawLine(context, begin, pi1);\n      drawLine(context, end, pi2);\n      drawn = true;\n    }\n  }\n\n  if (!drawn) {\n    return;\n  }\n\n  context.lineWidth = width;\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n\n  if (shadow.enable) {\n    const shadowColor = rangeColorToRgb(shadow.color);\n\n    if (shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = getStyleFromRgb(shadowColor);\n    }\n  }\n\n  context.stroke();\n}\nexport function drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n  drawTriangle(context, pos1, pos2, pos3);\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n  context.fill();\n}","map":{"version":3,"names":["drawLine","drawTriangle","getDistance","getDistances","getStyleFromRgb","rangeColorToRgb","drawLinkLine","context","width","begin","end","maxDistance","canvasSize","warp","backgroundMask","composite","colorLine","opacity","shadow","drawn","pi1","pi2","endNE","x","y","d1","distance","yi","dy","dx","endSW","height","d2","xi","endSE","d3","lineWidth","globalCompositeOperation","strokeStyle","enable","shadowColor","color","shadowBlur","blur","stroke","drawLinkTriangle","pos1","pos2","pos3","colorTriangle","opacityTriangle","fillStyle","fill"],"sources":["/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/frontend/node_modules/tsparticles-interaction-particles-links/esm/Utils.js"],"sourcesContent":["import { drawLine, drawTriangle, getDistance, getDistances, getStyleFromRgb, rangeColorToRgb, } from \"tsparticles-engine\";\nexport function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n    let drawn = false;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}