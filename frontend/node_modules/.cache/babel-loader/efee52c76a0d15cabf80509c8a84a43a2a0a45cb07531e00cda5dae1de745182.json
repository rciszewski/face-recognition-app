{"ast":null,"code":"import { arrayRandomIndex, executeOnSingleOrMultiple, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n  constructor(engine, container) {\n    this.container = container;\n    this._engine = engine;\n    this.array = [];\n    this.emitters = [];\n    this.interactivityEmitters = {\n      random: {\n        count: 1,\n        enable: false\n      },\n      value: []\n    };\n\n    container.getEmitter = idxOrName => idxOrName === undefined || typeof idxOrName === \"number\" ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n\n    container.addEmitter = (options, position) => this.addEmitter(options, position);\n\n    container.removeEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        this.removeEmitter(emitter);\n      }\n    };\n\n    container.playEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPlay();\n      }\n    };\n\n    container.pauseEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPause();\n      }\n    };\n  }\n\n  addEmitter(options, position) {\n    const emitterOptions = new Emitter();\n    emitterOptions.load(options);\n    const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n    this.array.push(emitter);\n    return emitter;\n  }\n\n  handleClickMode(mode) {\n    const emitterOptions = this.emitters,\n          modeEmitters = this.interactivityEmitters;\n\n    if (mode === \"emitter\") {\n      let emittersModeOptions;\n\n      if (modeEmitters && modeEmitters.value instanceof Array) {\n        if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n          emittersModeOptions = [];\n          const usedIndexes = [];\n\n          for (let i = 0; i < modeEmitters.random.count; i++) {\n            const idx = arrayRandomIndex(modeEmitters.value);\n\n            if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n              i--;\n              continue;\n            }\n\n            usedIndexes.push(idx);\n            emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n          }\n        } else {\n          emittersModeOptions = modeEmitters.value;\n        }\n      } else {\n        emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n      }\n\n      const emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions,\n            ePosition = this.container.interactivity.mouse.clickPosition;\n      executeOnSingleOrMultiple(emittersOptions, emitter => {\n        this.addEmitter(emitter, ePosition);\n      });\n    }\n  }\n\n  async init() {\n    this.emitters = this.container.actualOptions.emitters;\n    this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n\n    if (this.emitters instanceof Array) {\n      for (const emitterOptions of this.emitters) {\n        this.addEmitter(emitterOptions);\n      }\n    } else {\n      this.addEmitter(this.emitters);\n    }\n  }\n\n  pause() {\n    for (const emitter of this.array) {\n      emitter.pause();\n    }\n  }\n\n  play() {\n    for (const emitter of this.array) {\n      emitter.play();\n    }\n  }\n\n  removeEmitter(emitter) {\n    const index = this.array.indexOf(emitter);\n\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n\n  resize() {\n    for (const emitter of this.array) {\n      emitter.resize();\n    }\n  }\n\n  stop() {\n    this.array = [];\n  }\n\n  update(delta) {\n    for (const emitter of this.array) {\n      emitter.update(delta);\n    }\n  }\n\n}","map":{"version":3,"names":["arrayRandomIndex","executeOnSingleOrMultiple","itemFromArray","Emitter","EmitterInstance","Emitters","constructor","engine","container","_engine","array","emitters","interactivityEmitters","random","count","enable","value","getEmitter","idxOrName","undefined","find","t","name","addEmitter","options","position","removeEmitter","emitter","playEmitter","externalPlay","pauseEmitter","externalPause","emitterOptions","load","push","handleClickMode","mode","modeEmitters","emittersModeOptions","Array","length","usedIndexes","i","idx","includes","emittersOptions","ePosition","interactivity","mouse","clickPosition","init","actualOptions","modes","pause","play","index","indexOf","splice","resize","stop","update","delta"],"sources":["/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/frontend/node_modules/tsparticles-plugin-emitters/esm/Emitters.js"],"sourcesContent":["import { arrayRandomIndex, executeOnSingleOrMultiple, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode === \"emitter\") {\n            let emittersModeOptions;\n            if (modeEmitters && modeEmitters.value instanceof Array) {\n                if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                    emittersModeOptions = [];\n                    const usedIndexes = [];\n                    for (let i = 0; i < modeEmitters.random.count; i++) {\n                        const idx = arrayRandomIndex(modeEmitters.value);\n                        if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                            i--;\n                            continue;\n                        }\n                        usedIndexes.push(idx);\n                        emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                    }\n                }\n                else {\n                    emittersModeOptions = modeEmitters.value;\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n            }\n            const emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n            executeOnSingleOrMultiple(emittersOptions, (emitter) => {\n                this.addEmitter(emitter, ePosition);\n            });\n        }\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (this.emitters instanceof Array) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,yBAA3B,EAAsDC,aAAtD,QAA2E,oBAA3E;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAO,MAAMC,QAAN,CAAe;EAClBC,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoB;IAC3B,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,OAAL,GAAeF,MAAf;IACA,KAAKG,KAAL,GAAa,EAAb;IACA,KAAKC,QAAL,GAAgB,EAAhB;IACA,KAAKC,qBAAL,GAA6B;MACzBC,MAAM,EAAE;QACJC,KAAK,EAAE,CADH;QAEJC,MAAM,EAAE;MAFJ,CADiB;MAKzBC,KAAK,EAAE;IALkB,CAA7B;;IAOAR,SAAS,CAACS,UAAV,GAAwBC,SAAD,IAAeA,SAAS,KAAKC,SAAd,IAA2B,OAAOD,SAAP,KAAqB,QAAhD,GAChC,KAAKR,KAAL,CAAWQ,SAAS,IAAI,CAAxB,CADgC,GAEhC,KAAKR,KAAL,CAAWU,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWJ,SAAlC,CAFN;;IAGAV,SAAS,CAACe,UAAV,GAAuB,CAACC,OAAD,EAAUC,QAAV,KAAuB,KAAKF,UAAL,CAAgBC,OAAhB,EAAyBC,QAAzB,CAA9C;;IACAjB,SAAS,CAACkB,aAAV,GAA2BR,SAAD,IAAe;MACrC,MAAMS,OAAO,GAAGnB,SAAS,CAACS,UAAV,CAAqBC,SAArB,CAAhB;;MACA,IAAIS,OAAJ,EAAa;QACT,KAAKD,aAAL,CAAmBC,OAAnB;MACH;IACJ,CALD;;IAMAnB,SAAS,CAACoB,WAAV,GAAyBV,SAAD,IAAe;MACnC,MAAMS,OAAO,GAAGnB,SAAS,CAACS,UAAV,CAAqBC,SAArB,CAAhB;;MACA,IAAIS,OAAJ,EAAa;QACTA,OAAO,CAACE,YAAR;MACH;IACJ,CALD;;IAMArB,SAAS,CAACsB,YAAV,GAA0BZ,SAAD,IAAe;MACpC,MAAMS,OAAO,GAAGnB,SAAS,CAACS,UAAV,CAAqBC,SAArB,CAAhB;;MACA,IAAIS,OAAJ,EAAa;QACTA,OAAO,CAACI,aAAR;MACH;IACJ,CALD;EAMH;;EACDR,UAAU,CAACC,OAAD,EAAUC,QAAV,EAAoB;IAC1B,MAAMO,cAAc,GAAG,IAAI7B,OAAJ,EAAvB;IACA6B,cAAc,CAACC,IAAf,CAAoBT,OAApB;IACA,MAAMG,OAAO,GAAG,IAAIvB,eAAJ,CAAoB,KAAKK,OAAzB,EAAkC,IAAlC,EAAwC,KAAKD,SAA7C,EAAwDwB,cAAxD,EAAwEP,QAAxE,CAAhB;IACA,KAAKf,KAAL,CAAWwB,IAAX,CAAgBP,OAAhB;IACA,OAAOA,OAAP;EACH;;EACDQ,eAAe,CAACC,IAAD,EAAO;IAClB,MAAMJ,cAAc,GAAG,KAAKrB,QAA5B;IAAA,MAAsC0B,YAAY,GAAG,KAAKzB,qBAA1D;;IACA,IAAIwB,IAAI,KAAK,SAAb,EAAwB;MACpB,IAAIE,mBAAJ;;MACA,IAAID,YAAY,IAAIA,YAAY,CAACrB,KAAb,YAA8BuB,KAAlD,EAAyD;QACrD,IAAIF,YAAY,CAACrB,KAAb,CAAmBwB,MAAnB,GAA4B,CAA5B,IAAiCH,YAAY,CAACxB,MAAb,CAAoBE,MAAzD,EAAiE;UAC7DuB,mBAAmB,GAAG,EAAtB;UACA,MAAMG,WAAW,GAAG,EAApB;;UACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,YAAY,CAACxB,MAAb,CAAoBC,KAAxC,EAA+C4B,CAAC,EAAhD,EAAoD;YAChD,MAAMC,GAAG,GAAG3C,gBAAgB,CAACqC,YAAY,CAACrB,KAAd,CAA5B;;YACA,IAAIyB,WAAW,CAACG,QAAZ,CAAqBD,GAArB,KAA6BF,WAAW,CAACD,MAAZ,GAAqBH,YAAY,CAACrB,KAAb,CAAmBwB,MAAzE,EAAiF;cAC7EE,CAAC;cACD;YACH;;YACDD,WAAW,CAACP,IAAZ,CAAiBS,GAAjB;YACAL,mBAAmB,CAACJ,IAApB,CAAyBhC,aAAa,CAACmC,YAAY,CAACrB,KAAd,EAAqB2B,GAArB,CAAtC;UACH;QACJ,CAZD,MAaK;UACDL,mBAAmB,GAAGD,YAAY,CAACrB,KAAnC;QACH;MACJ,CAjBD,MAkBK;QACDsB,mBAAmB,GAAGD,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACrB,KAA/F;MACH;;MACD,MAAM6B,eAAe,GAAGP,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAK,KAAK,CAA7D,GAAiEA,mBAAjE,GAAuFN,cAA/G;MAAA,MAA+Hc,SAAS,GAAG,KAAKtC,SAAL,CAAeuC,aAAf,CAA6BC,KAA7B,CAAmCC,aAA9K;MACAhD,yBAAyB,CAAC4C,eAAD,EAAmBlB,OAAD,IAAa;QACpD,KAAKJ,UAAL,CAAgBI,OAAhB,EAAyBmB,SAAzB;MACH,CAFwB,CAAzB;IAGH;EACJ;;EACS,MAAJI,IAAI,GAAG;IACT,KAAKvC,QAAL,GAAgB,KAAKH,SAAL,CAAe2C,aAAf,CAA6BxC,QAA7C;IACA,KAAKC,qBAAL,GAA6B,KAAKJ,SAAL,CAAe2C,aAAf,CAA6BJ,aAA7B,CAA2CK,KAA3C,CAAiDzC,QAA9E;;IACA,IAAI,KAAKA,QAAL,YAAyB4B,KAA7B,EAAoC;MAChC,KAAK,MAAMP,cAAX,IAA6B,KAAKrB,QAAlC,EAA4C;QACxC,KAAKY,UAAL,CAAgBS,cAAhB;MACH;IACJ,CAJD,MAKK;MACD,KAAKT,UAAL,CAAgB,KAAKZ,QAArB;IACH;EACJ;;EACD0C,KAAK,GAAG;IACJ,KAAK,MAAM1B,OAAX,IAAsB,KAAKjB,KAA3B,EAAkC;MAC9BiB,OAAO,CAAC0B,KAAR;IACH;EACJ;;EACDC,IAAI,GAAG;IACH,KAAK,MAAM3B,OAAX,IAAsB,KAAKjB,KAA3B,EAAkC;MAC9BiB,OAAO,CAAC2B,IAAR;IACH;EACJ;;EACD5B,aAAa,CAACC,OAAD,EAAU;IACnB,MAAM4B,KAAK,GAAG,KAAK7C,KAAL,CAAW8C,OAAX,CAAmB7B,OAAnB,CAAd;;IACA,IAAI4B,KAAK,IAAI,CAAb,EAAgB;MACZ,KAAK7C,KAAL,CAAW+C,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;IACH;EACJ;;EACDG,MAAM,GAAG;IACL,KAAK,MAAM/B,OAAX,IAAsB,KAAKjB,KAA3B,EAAkC;MAC9BiB,OAAO,CAAC+B,MAAR;IACH;EACJ;;EACDC,IAAI,GAAG;IACH,KAAKjD,KAAL,GAAa,EAAb;EACH;;EACDkD,MAAM,CAACC,KAAD,EAAQ;IACV,KAAK,MAAMlC,OAAX,IAAsB,KAAKjB,KAA3B,EAAkC;MAC9BiB,OAAO,CAACiC,MAAR,CAAeC,KAAf;IACH;EACJ;;AAlHiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}