{"ast":null,"code":"import { Circle, ParticlesInteractorBase, getDistance, getLinkRandomColor } from \"tsparticles-engine\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Links } from \"./Options/Classes/Links\";\n\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n  let distance = getDistance(pos1, pos2);\n\n  if (!warp || distance <= optDistance) {\n    return distance;\n  }\n\n  const pos2NE = {\n    x: pos2.x - canvasSize.width,\n    y: pos2.y\n  };\n  distance = getDistance(pos1, pos2NE);\n\n  if (distance <= optDistance) {\n    return distance;\n  }\n\n  const pos2SE = {\n    x: pos2.x - canvasSize.width,\n    y: pos2.y - canvasSize.height\n  };\n  distance = getDistance(pos1, pos2SE);\n\n  if (distance <= optDistance) {\n    return distance;\n  }\n\n  const pos2SW = {\n    x: pos2.x,\n    y: pos2.y - canvasSize.height\n  };\n  distance = getDistance(pos1, pos2SW);\n  return distance;\n}\n\nexport class Linker extends ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n    this.linkContainer = container;\n  }\n\n  clear() {}\n\n  init() {\n    this.linkContainer.particles.linksColors = new Map();\n  }\n\n  async interact(p1) {\n    var _a;\n\n    if (!p1.options.links) {\n      return;\n    }\n\n    p1.links = [];\n    const pos1 = p1.getPosition(),\n          container = this.container,\n          canvasSize = container.canvas.size;\n\n    if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n      return;\n    }\n\n    const linkOpt1 = p1.options.links,\n          optOpacity = linkOpt1.opacity,\n          optDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0,\n          warp = linkOpt1.warp,\n          range = warp ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize) : new Circle(pos1.x, pos1.y, optDistance),\n          query = container.particles.quadTree.query(range);\n\n    for (const p2 of query) {\n      const linkOpt2 = p2.options.links;\n\n      if (p1 === p2 || !(linkOpt2 === null || linkOpt2 === void 0 ? void 0 : linkOpt2.enable) || linkOpt1.id !== linkOpt2.id || p2.spawning || p2.destroyed || !p2.links || p1.links.map(t => t.destination).indexOf(p2) !== -1 || p2.links.map(t => t.destination).indexOf(p1) !== -1) {\n        continue;\n      }\n\n      const pos2 = p2.getPosition();\n\n      if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n        continue;\n      }\n\n      const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n\n      if (distance > optDistance) {\n        return;\n      }\n\n      const opacityLine = (1 - distance / optDistance) * optOpacity;\n      this.setColor(p1);\n      p1.links.push({\n        destination: p2,\n        opacity: opacityLine\n      });\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    return !!((_a = particle.options.links) === null || _a === void 0 ? void 0 : _a.enable);\n  }\n\n  loadParticlesOptions(options) {\n    var _a, _b;\n\n    if (!options.links) {\n      options.links = new Links();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.links.load((_b = (_a = source === null || source === void 0 ? void 0 : source.links) !== null && _a !== void 0 ? _a : source === null || source === void 0 ? void 0 : source.lineLinked) !== null && _b !== void 0 ? _b : source === null || source === void 0 ? void 0 : source.line_linked);\n    }\n  }\n\n  reset() {}\n\n  setColor(p1) {\n    if (!p1.options.links) {\n      return;\n    }\n\n    const container = this.linkContainer,\n          linksOptions = p1.options.links;\n    let linkColor = linksOptions.id === undefined ? container.particles.linksColor : container.particles.linksColors.get(linksOptions.id);\n\n    if (linkColor) {\n      return;\n    }\n\n    const optColor = linksOptions.color;\n    linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n\n    if (linksOptions.id === undefined) {\n      container.particles.linksColor = linkColor;\n    } else {\n      container.particles.linksColors.set(linksOptions.id, linkColor);\n    }\n  }\n\n}","map":{"version":3,"names":["Circle","ParticlesInteractorBase","getDistance","getLinkRandomColor","CircleWarp","Links","getLinkDistance","pos1","pos2","optDistance","canvasSize","warp","distance","pos2NE","x","width","y","pos2SE","height","pos2SW","Linker","constructor","container","linkContainer","clear","init","particles","linksColors","Map","interact","p1","_a","options","links","getPosition","canvas","size","linkOpt1","optOpacity","opacity","retina","linksDistance","range","query","quadTree","p2","linkOpt2","enable","id","spawning","destroyed","map","t","destination","indexOf","opacityLine","setColor","push","isEnabled","particle","loadParticlesOptions","_b","sources","source","load","lineLinked","line_linked","reset","linksOptions","linkColor","undefined","linksColor","get","optColor","color","blink","consent","set"],"sources":["/Users/ronciszewski/Desktop/Programming/SmartBrain/face-recognition-app/frontend/node_modules/tsparticles-interaction-particles-links/esm/Linker.js"],"sourcesContent":["import { Circle, ParticlesInteractorBase, getDistance, getLinkRandomColor } from \"tsparticles-engine\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Links } from \"./Options/Classes/Links\";\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    let distance = getDistance(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const pos2NE = {\n        x: pos2.x - canvasSize.width,\n        y: pos2.y,\n    };\n    distance = getDistance(pos1, pos2NE);\n    if (distance <= optDistance) {\n        return distance;\n    }\n    const pos2SE = {\n        x: pos2.x - canvasSize.width,\n        y: pos2.y - canvasSize.height,\n    };\n    distance = getDistance(pos1, pos2SE);\n    if (distance <= optDistance) {\n        return distance;\n    }\n    const pos2SW = {\n        x: pos2.x,\n        y: pos2.y - canvasSize.height,\n    };\n    distance = getDistance(pos1, pos2SW);\n    return distance;\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        var _a;\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0, warp = linkOpt1.warp, range = warp\n            ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize)\n            : new Circle(pos1.x, pos1.y, optDistance), query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !(linkOpt2 === null || linkOpt2 === void 0 ? void 0 : linkOpt2.enable) ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.map((t) => t.destination).indexOf(p2) !== -1 ||\n                p2.links.map((t) => t.destination).indexOf(p1) !== -1) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                return;\n            }\n            const opacityLine = (1 - distance / optDistance) * optOpacity;\n            this.setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        return !!((_a = particle.options.links) === null || _a === void 0 ? void 0 : _a.enable);\n    }\n    loadParticlesOptions(options, ...sources) {\n        var _a, _b;\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load((_b = (_a = source === null || source === void 0 ? void 0 : source.links) !== null && _a !== void 0 ? _a : source === null || source === void 0 ? void 0 : source.lineLinked) !== null && _b !== void 0 ? _b : source === null || source === void 0 ? void 0 : source.line_linked);\n        }\n    }\n    reset() {\n    }\n    setColor(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        const container = this.linkContainer, linksOptions = p1.options.links;\n        let linkColor = linksOptions.id === undefined\n            ? container.particles.linksColor\n            : container.particles.linksColors.get(linksOptions.id);\n        if (linkColor) {\n            return;\n        }\n        const optColor = linksOptions.color;\n        linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n        if (linksOptions.id === undefined) {\n            container.particles.linksColor = linkColor;\n        }\n        else {\n            container.particles.linksColors.set(linksOptions.id, linkColor);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}