/*! tsParticles Collisions Particles Interaction v2.0.6 by Matteo Bruni */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("tsparticles-engine"));else if("function"==typeof define&&define.amd)define(["tsparticles-engine"],t);else{var i="object"==typeof exports?t(require("tsparticles-engine")):t(e.window);for(var o in i)("object"==typeof exports?exports:e)[o]=i[o]}}(this,(e=>(()=>{"use strict";var t={818:t=>{t.exports=e}},i={};function o(e){var s=i[e];if(void 0!==s)return s.exports;var a=i[e]={exports:{}};return t[e](a,a.exports,o),a.exports}o.d=(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};return(()=>{o.r(s),o.d(s,{loadParticlesCollisionsInteraction:()=>r});var e=o(818);function t(t,i){(0,e.circleBounce)((0,e.circleBounceDataFromParticle)(t),(0,e.circleBounceDataFromParticle)(i))}function i(i,o,s,a){switch(i.options.collisions.mode){case"absorb":!function(t,i,o,s){if(void 0===t.getRadius()&&void 0!==i.getRadius())t.destroy();else if(void 0!==t.getRadius()&&void 0===i.getRadius())i.destroy();else if(void 0!==t.getRadius()&&void 0!==i.getRadius())if(t.getRadius()>=i.getRadius()){const a=(0,e.clamp)(t.getRadius()/i.getRadius(),0,i.getRadius())*o;t.size.value+=a,i.size.value-=a,i.getRadius()<=s&&(i.size.value=0,i.destroy())}else{const a=(0,e.clamp)(i.getRadius()/t.getRadius(),0,t.getRadius())*o;t.size.value-=a,i.size.value+=a,t.getRadius()<=s&&(t.size.value=0,t.destroy())}}(i,o,s,a);break;case"bounce":t(i,o);break;case"destroy":!function(e,i){e.unbreakable||i.unbreakable||t(e,i),void 0===e.getRadius()&&void 0!==i.getRadius()?e.destroy():void 0!==e.getRadius()&&void 0===i.getRadius()?i.destroy():void 0!==e.getRadius()&&void 0!==i.getRadius()&&(e.getRadius()>=i.getRadius()?i.destroy():e.destroy())}(i,o)}}class a extends e.ParticlesInteractorBase{constructor(e){super(e)}isEnabled(e){return e.options.collisions.enable}reset(){}async interact(t){const o=this.container,s=t.getPosition(),a=t.getRadius(),r=o.particles.quadTree.queryCircle(s,2*a);for(const n of r){if(t===n||!n.options.collisions.enable||t.options.collisions.mode!==n.options.collisions.mode||n.destroyed||n.spawning)continue;const r=n.getPosition(),d=n.getRadius();if(Math.abs(Math.round(s.z)-Math.round(r.z))>a+d)continue;(0,e.getDistance)(s,r)>a+d||i(t,n,o.fpsLimit/1e3,o.retina.pixelRatio)}}}async function r(e){await e.addInteractor("particlesCollisions",(e=>new a(e)))}})(),s})()));