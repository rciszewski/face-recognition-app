/*! tsParticles Base Move v2.0.6 by Matteo Bruni */
!function(e,i){if("object"==typeof exports&&"object"==typeof module)module.exports=i(require("tsparticles-engine"));else if("function"==typeof define&&define.amd)define(["tsparticles-engine"],i);else{var t="object"==typeof exports?i(require("tsparticles-engine")):i(e.window);for(var n in t)("object"==typeof exports?exports:e)[n]=t[n]}}(this,(function(e){return function(){"use strict";var i={818:function(i){i.exports=e}},t={};function n(e){var o=t[e];if(void 0!==o)return o.exports;var a=t[e]={exports:{}};return i[e](a,a.exports,n),a.exports}n.d=function(e,i){for(var t in i)n.o(i,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:i[t]})},n.o=function(e,i){return Object.prototype.hasOwnProperty.call(e,i)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return function(){n.r(o),n.d(o,{loadBaseMover:function(){return t}});var e=n(818);class i{init(i){var t;const n=i.container,o=i.options.move.spin;if(o.enable){const a=null!==(t=o.position)&&void 0!==t?t:{x:50,y:50},s={x:a.x/100*n.canvas.size.width,y:a.y/100*n.canvas.size.height},r=i.getPosition(),c=(0,e.getDistance)(r,s),l=(0,e.getRangeValue)(o.acceleration);i.retina.spinAcceleration=l*n.retina.pixelRatio,i.spin={center:s,direction:i.velocity.x>=0?"clockwise":"counter-clockwise",angle:i.velocity.angle,radius:c,acceleration:i.retina.spinAcceleration}}}isEnabled(e){return!e.destroyed&&e.options.move.enable}move(i,t){var n,o,a,s,r;const c=i.options,l=c.move;if(!l.enable)return;const p=i.container,y=function(i){const t=i.container,n=t.actualOptions;if(!(0,e.isInArray)("slow",n.interactivity.events.onHover.mode))return 1;const o=i.container.interactivity.mouse.position;if(!o)return 1;const a=i.getPosition(),s=(0,e.getDistance)(o,a),r=t.retina.slowModeRadius;return s>r?1:(s/r||0)/n.interactivity.modes.slow.factor}(i),d=(null!==(n=(s=i.retina).moveSpeed)&&void 0!==n?n:s.moveSpeed=(0,e.getRangeValue)(l.speed)*p.retina.pixelRatio)*p.retina.reduceFactor,u=null!==(o=(r=i.retina).moveDrift)&&void 0!==o?o:r.moveDrift=(0,e.getRangeValue)(i.options.move.drift)*p.retina.pixelRatio,v=(0,e.getRangeMax)(c.size.value)*p.retina.pixelRatio,f=d*((l.size?i.getRadius()/v:1)*y*(t.factor||1))/2;!function(i,t){const n=i.options.move.path;if(!n.enable)return;const o=i.container;if(i.lastPathTime<=i.pathDelay)return void(i.lastPathTime+=t.value);const a=o.pathGenerator.generate(i);i.velocity.addTo(a),n.clamp&&(i.velocity.x=(0,e.clamp)(i.velocity.x,-1,1),i.velocity.y=(0,e.clamp)(i.velocity.y,-1,1)),i.lastPathTime-=i.pathDelay}(i,t);const x=i.gravity,m=x.enable&&x.inverse?-1:1;x.enable&&f&&(i.velocity.y+=m*(x.acceleration*t.factor)/(60*f)),u&&f&&(i.velocity.x+=u*t.factor/(60*f));const g=i.moveDecay;1!=g&&i.velocity.multTo(g);const h=i.velocity.mult(f),b=null!==(a=i.retina.maxSpeed)&&void 0!==a?a:p.retina.maxSpeed;x.enable&&b>0&&(!x.inverse&&h.y>=0&&h.y>=b||x.inverse&&h.y<=0&&h.y<=-b)&&(h.y=m*b,f&&(i.velocity.y=h.y/f));const M=i.options.zIndex,w=(1-i.zIndexFactor)**M.velocityRate;l.spin.enable?function(e,i){const t=e.container;if(!e.spin)return;const n={x:"clockwise"===e.spin.direction?Math.cos:Math.sin,y:"clockwise"===e.spin.direction?Math.sin:Math.cos};e.position.x=e.spin.center.x+e.spin.radius*n.x(e.spin.angle),e.position.y=e.spin.center.y+e.spin.radius*n.y(e.spin.angle),e.spin.radius+=e.spin.acceleration;const o=Math.max(t.canvas.size.width,t.canvas.size.height);e.spin.radius>o/2?(e.spin.radius=o/2,e.spin.acceleration*=-1):e.spin.radius<0&&(e.spin.radius=0,e.spin.acceleration*=-1),e.spin.angle+=i/100*(1-e.spin.radius/o)}(i,f):(1!=w&&h.multTo(w),i.position.addTo(h),l.vibrate&&(i.position.x+=Math.sin(i.position.x*Math.cos(i.position.y)),i.position.y+=Math.cos(i.position.y*Math.sin(i.position.x)))),function(i){const t=i.initialPosition,{dx:n,dy:o}=(0,e.getDistances)(t,i.position),a=Math.abs(n),s=Math.abs(o),r=i.retina.maxDistance.horizontal,c=i.retina.maxDistance.vertical;if(r||c)if((r&&a>=r||c&&s>=c)&&!i.misplaced)i.misplaced=!!r&&a>r||!!c&&s>c,r&&(i.velocity.x=i.velocity.y/2-i.velocity.x),c&&(i.velocity.y=i.velocity.x/2-i.velocity.y);else if((!r||a<r)&&(!c||s<c)&&i.misplaced)i.misplaced=!1;else if(i.misplaced){const e=i.position,n=i.velocity;r&&(e.x<t.x&&n.x<0||e.x>t.x&&n.x>0)&&(n.x*=-Math.random()),c&&(e.y<t.y&&n.y<0||e.y>t.y&&n.y>0)&&(n.y*=-Math.random())}}(i)}}async function t(e){e.addMover("base",(()=>new i))}}(),o}()}));